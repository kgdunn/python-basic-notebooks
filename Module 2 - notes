Containers
==========

There are four collection data types in the Python programming language:

List is a collection which is ordered and changeable. Allows duplicate members.
Tuple is a collection which is ordered and unchangeable. Allows duplicate members.
Set is a collection which is unordered and unindexed. No duplicate members.
Dictionary is a collection which is unordered, changeable and indexed. No duplicate members.

Strings
=========

* List comprehension. Find number of AGTC entries in a sequence.
* Read genome. Stop when you find first sequence of GATTAG


Lists
======

Solution:
Is aspergillus in my list? True
Aspergillus index is: 2
Last element in the list is: aspergillus
Last three elements: ['chimp', 'bacillus', 'aspergillus']
Number of wrong elements: 1
Number of wrong elements: 0
[2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]

# Initialize a list with elements:
# 'yeast', 'aspergillus' and 'bacillus'
micros = ['yeast', 'bacillus', 'aspergillus']

# Test if yarrowia is  in 
# the list with the 'in' statment
print("Is aspergillus in my list? {}".format('aspergillus' in micros))

# Now create another list called 'primates' with 
# 'human' and 'chimp' called 
primates = ['human', 'chimp']

# Construct a new list with both the micros 
# and the primates called species 
# using the '+' operator
species = micros + primates

# grow the 'species' list with single element 'cow' 
# without making a new list object, 
# i.e. grow the list using the 'append' function
species.append('cow')

# Create another list called 'reptiles'
# containing 'crocodile' and 'turtle'
reptiles = ['crocodile', 'turtle']

# Grow the species list with the reptiles
# using the 'extend' function
# 'extend' appends the whole reptiles list to species
species.extend(reptiles)

# Now print the index of 'aspergillus' in the species
print("Aspergillus index is: {}".format(species.index('aspergillus')))

# let's sort the list 'species' using the 'sort' function
species.sort()

# Reverse all elements in the list using the 'reverse' function
species.reverse()

# Indexing list can be done from the beginning, 
# but also from the end using negative integers
# Print the last element in the list
print("Last element in the list is: {}".format(species[-1]))

# Now use negative indexing to print the last three elements of the list
print("Last three elements: {}".format(species[-3:]))


# CAUTION! You cannot copy a list simply by typing species2 = species, 
# because: species2 will only be a reference to list1, 
# and changes made in species will automatically also be made in species2
species2 = species
species2.append('wrong')

# Count number od 'wrong' elements in the 
# 'species list using the 'count' function
print("Number of wrong elements: {}".format(species.count('wrong')))

# Let's remove this erroneously added entry from species
# using the 'pop' function (defaults to removing the last element)
species.pop()

# to prevent unwanting referencing, use 'copy'
# to make a new list object containing the same content
species2 = species.copy()
species2.append('wrong')

# Again Count number of 'wrong' elements in the 
# 'species list using the 'count' function
# Now it is not there anymore
print("Number of wrong elements: {}".format(species.count('wrong')))

# Make a list with first 10 elements of the 
# multiplication table of 2 (tafel van 2)
# using "Python list comprehension"
print([2**x for x in range(1,11)])


Notes for modules 2 and 3
===========================


if-else
--------

If ; if-else; if-elif-else; aka flow control, indentation and colons. See udemy

Report automatically generated. If slope is positive or negative and there are no outliers. If else and elif
If flow control. Write program from sketch. If else, and, or.
Ladders;  Operator is provided as input, and two values exist. Do either +-*/ operationg; only one option gets executed.

One-liner if statement:

a = 3
b = 4
q = a if a < b else b


For loop
---------

Y dS/dt = -dX/dt




Newton's method with this plan (sketch out on paper)
1. Initialize a
2. Initialize x to a/2
3. Repeat a few times:
>Replace x by (x + a/x)/2
>Display x
4. Stop; show the true value


Vectorization:
s = 0
for n = 1:100000
    s += 1/n^**

# Wait for numpy
n = arange(100000)
s = sum( 1 / n**2 )



While loop
----------
While loop with += incremental
Do while loop. Execute, then check: can be done with a break statement and condition check at end of a while True loop.

Example. Keep going until you see a particular DNA sequence. Or peak value above certain threshold



Operators
----------
A += 4; also others like subtract

Style
-----
Comments: TODO comments used sparingly

Loops
-------
Make the Fibonacci series with append function
while True:
   print('Hi')
   # Infinite while loop. How to stop it?

Files
-------
Read into list. read_lines() function and iterations on the list.
Write to file
Close file

Types
------
change from one type to another:
* float(45)
* int(45.7)
* round(45.7)  # different result
* chr(65)
* Won't loose precision with ints. If a is int And multiplied by float, it is upgraded

Lists
-------
Using the above string, you can create a list of it, splitting every word in the sentence into an entry in the list.

You do this with: ``s.split(' ')`` and it will return: ``['Secretly', 'under', 'development', ...  'the', 'lunar', 'surface.']``

Then you can iterate on that list, or do anything that lists can do. This section explores list methods

* See mikedane resources
* Lists can have mixed types. Contrast to MATLAB
* Find entries which appear more than once in a list
* Common elements into two different lists. Join function equivalent?
* Count how many entries in a list are greater than a threshold. List comprehension
* Contrast with tuples. Seen before. Immutable concept introduced
* Index slices. Doesn't return last element
* Lists: append, insert, extend. Sort is special..clear() too
* Read file for the above DNA string
    import urllib.request
    with urllib.request.urlopen('http://python.org/') as response:
        html = response.read()


General exercises
---------------------
Random number. Guess it's vlaue. If else, while loops printing.
Calculate the molar mass given a chemical formula: C5H9NOS. Methionine. Do for others amino acids
